// Generated by view binder compiler. Do not edit!
package com.forthgreen.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import com.forthgreen.app.R;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ShimmerRepliesBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CircleImageView civUserImageShimmer;

  @NonNull
  public final CardView cvReplyShimmer;

  @NonNull
  public final Guideline guidelineEndShimmer;

  @NonNull
  public final Guideline guidelineStartOuterShimmer;

  @NonNull
  public final Guideline guidelineStartShimmer;

  @NonNull
  public final TextView tvReplyShimmer;

  @NonNull
  public final TextView tvUserFullNameShimmer;

  @NonNull
  public final TextView tvViewMore;

  @NonNull
  public final View viewLikeIconShimmer;

  @NonNull
  public final View viewLikesShimmer;

  private ShimmerRepliesBinding(@NonNull ConstraintLayout rootView,
      @NonNull CircleImageView civUserImageShimmer, @NonNull CardView cvReplyShimmer,
      @NonNull Guideline guidelineEndShimmer, @NonNull Guideline guidelineStartOuterShimmer,
      @NonNull Guideline guidelineStartShimmer, @NonNull TextView tvReplyShimmer,
      @NonNull TextView tvUserFullNameShimmer, @NonNull TextView tvViewMore,
      @NonNull View viewLikeIconShimmer, @NonNull View viewLikesShimmer) {
    this.rootView = rootView;
    this.civUserImageShimmer = civUserImageShimmer;
    this.cvReplyShimmer = cvReplyShimmer;
    this.guidelineEndShimmer = guidelineEndShimmer;
    this.guidelineStartOuterShimmer = guidelineStartOuterShimmer;
    this.guidelineStartShimmer = guidelineStartShimmer;
    this.tvReplyShimmer = tvReplyShimmer;
    this.tvUserFullNameShimmer = tvUserFullNameShimmer;
    this.tvViewMore = tvViewMore;
    this.viewLikeIconShimmer = viewLikeIconShimmer;
    this.viewLikesShimmer = viewLikesShimmer;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ShimmerRepliesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ShimmerRepliesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.shimmer_replies, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ShimmerRepliesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.civUserImageShimmer;
      CircleImageView civUserImageShimmer = rootView.findViewById(id);
      if (civUserImageShimmer == null) {
        break missingId;
      }

      id = R.id.cvReplyShimmer;
      CardView cvReplyShimmer = rootView.findViewById(id);
      if (cvReplyShimmer == null) {
        break missingId;
      }

      id = R.id.guidelineEndShimmer;
      Guideline guidelineEndShimmer = rootView.findViewById(id);
      if (guidelineEndShimmer == null) {
        break missingId;
      }

      id = R.id.guidelineStartOuterShimmer;
      Guideline guidelineStartOuterShimmer = rootView.findViewById(id);
      if (guidelineStartOuterShimmer == null) {
        break missingId;
      }

      id = R.id.guidelineStartShimmer;
      Guideline guidelineStartShimmer = rootView.findViewById(id);
      if (guidelineStartShimmer == null) {
        break missingId;
      }

      id = R.id.tvReplyShimmer;
      TextView tvReplyShimmer = rootView.findViewById(id);
      if (tvReplyShimmer == null) {
        break missingId;
      }

      id = R.id.tvUserFullNameShimmer;
      TextView tvUserFullNameShimmer = rootView.findViewById(id);
      if (tvUserFullNameShimmer == null) {
        break missingId;
      }

      id = R.id.tvViewMore;
      TextView tvViewMore = rootView.findViewById(id);
      if (tvViewMore == null) {
        break missingId;
      }

      id = R.id.viewLikeIconShimmer;
      View viewLikeIconShimmer = rootView.findViewById(id);
      if (viewLikeIconShimmer == null) {
        break missingId;
      }

      id = R.id.viewLikesShimmer;
      View viewLikesShimmer = rootView.findViewById(id);
      if (viewLikesShimmer == null) {
        break missingId;
      }

      return new ShimmerRepliesBinding((ConstraintLayout) rootView, civUserImageShimmer,
          cvReplyShimmer, guidelineEndShimmer, guidelineStartOuterShimmer, guidelineStartShimmer,
          tvReplyShimmer, tvUserFullNameShimmer, tvViewMore, viewLikeIconShimmer, viewLikesShimmer);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
