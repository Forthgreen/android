// Generated by view binder compiler. Do not edit!
package com.forthgreen.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Group;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewpager2.widget.ViewPager2;
import com.forthgreen.app.R;
import com.google.android.flexbox.FlexboxLayout;
import com.tbuonomo.viewpagerdotsindicator.SpringDotsIndicator;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ShimmerHomePostsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CircleImageView civPostUserImageShimmer;

  @NonNull
  public final SpringDotsIndicator dotIndicatorShimmer;

  @NonNull
  public final FlexboxLayout flexBoxShimmer;

  @NonNull
  public final Group groupMultiPictures;

  @NonNull
  public final Guideline guidelineEndShimmer;

  @NonNull
  public final Guideline guidelineStartShimer;

  @NonNull
  public final TextView tvCommentsShimmer;

  @NonNull
  public final TextView tvLikesShimmer;

  @NonNull
  public final TextView tvPostDescShimmer;

  @NonNull
  public final TextView tvUserFullNameShimmer;

  @NonNull
  public final TextView tvUserNameShimmer;

  @NonNull
  public final TextView tvViewMoreShimmer;

  @NonNull
  public final View viewBottomDividerShimmer;

  @NonNull
  public final View viewLikeShimmer;

  @NonNull
  public final View viewMessageShimmer;

  @NonNull
  public final ViewPager2 viewPagerShimmer;

  @NonNull
  public final View viewPictureDividerShimmer;

  private ShimmerHomePostsBinding(@NonNull ConstraintLayout rootView,
      @NonNull CircleImageView civPostUserImageShimmer,
      @NonNull SpringDotsIndicator dotIndicatorShimmer, @NonNull FlexboxLayout flexBoxShimmer,
      @NonNull Group groupMultiPictures, @NonNull Guideline guidelineEndShimmer,
      @NonNull Guideline guidelineStartShimer, @NonNull TextView tvCommentsShimmer,
      @NonNull TextView tvLikesShimmer, @NonNull TextView tvPostDescShimmer,
      @NonNull TextView tvUserFullNameShimmer, @NonNull TextView tvUserNameShimmer,
      @NonNull TextView tvViewMoreShimmer, @NonNull View viewBottomDividerShimmer,
      @NonNull View viewLikeShimmer, @NonNull View viewMessageShimmer,
      @NonNull ViewPager2 viewPagerShimmer, @NonNull View viewPictureDividerShimmer) {
    this.rootView = rootView;
    this.civPostUserImageShimmer = civPostUserImageShimmer;
    this.dotIndicatorShimmer = dotIndicatorShimmer;
    this.flexBoxShimmer = flexBoxShimmer;
    this.groupMultiPictures = groupMultiPictures;
    this.guidelineEndShimmer = guidelineEndShimmer;
    this.guidelineStartShimer = guidelineStartShimer;
    this.tvCommentsShimmer = tvCommentsShimmer;
    this.tvLikesShimmer = tvLikesShimmer;
    this.tvPostDescShimmer = tvPostDescShimmer;
    this.tvUserFullNameShimmer = tvUserFullNameShimmer;
    this.tvUserNameShimmer = tvUserNameShimmer;
    this.tvViewMoreShimmer = tvViewMoreShimmer;
    this.viewBottomDividerShimmer = viewBottomDividerShimmer;
    this.viewLikeShimmer = viewLikeShimmer;
    this.viewMessageShimmer = viewMessageShimmer;
    this.viewPagerShimmer = viewPagerShimmer;
    this.viewPictureDividerShimmer = viewPictureDividerShimmer;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ShimmerHomePostsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ShimmerHomePostsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.shimmer_home_posts, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ShimmerHomePostsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.civPostUserImageShimmer;
      CircleImageView civPostUserImageShimmer = rootView.findViewById(id);
      if (civPostUserImageShimmer == null) {
        break missingId;
      }

      id = R.id.dotIndicatorShimmer;
      SpringDotsIndicator dotIndicatorShimmer = rootView.findViewById(id);
      if (dotIndicatorShimmer == null) {
        break missingId;
      }

      id = R.id.flexBoxShimmer;
      FlexboxLayout flexBoxShimmer = rootView.findViewById(id);
      if (flexBoxShimmer == null) {
        break missingId;
      }

      id = R.id.groupMultiPictures;
      Group groupMultiPictures = rootView.findViewById(id);
      if (groupMultiPictures == null) {
        break missingId;
      }

      id = R.id.guidelineEndShimmer;
      Guideline guidelineEndShimmer = rootView.findViewById(id);
      if (guidelineEndShimmer == null) {
        break missingId;
      }

      id = R.id.guidelineStartShimer;
      Guideline guidelineStartShimer = rootView.findViewById(id);
      if (guidelineStartShimer == null) {
        break missingId;
      }

      id = R.id.tvCommentsShimmer;
      TextView tvCommentsShimmer = rootView.findViewById(id);
      if (tvCommentsShimmer == null) {
        break missingId;
      }

      id = R.id.tvLikesShimmer;
      TextView tvLikesShimmer = rootView.findViewById(id);
      if (tvLikesShimmer == null) {
        break missingId;
      }

      id = R.id.tvPostDescShimmer;
      TextView tvPostDescShimmer = rootView.findViewById(id);
      if (tvPostDescShimmer == null) {
        break missingId;
      }

      id = R.id.tvUserFullNameShimmer;
      TextView tvUserFullNameShimmer = rootView.findViewById(id);
      if (tvUserFullNameShimmer == null) {
        break missingId;
      }

      id = R.id.tvUserNameShimmer;
      TextView tvUserNameShimmer = rootView.findViewById(id);
      if (tvUserNameShimmer == null) {
        break missingId;
      }

      id = R.id.tvViewMoreShimmer;
      TextView tvViewMoreShimmer = rootView.findViewById(id);
      if (tvViewMoreShimmer == null) {
        break missingId;
      }

      id = R.id.viewBottomDividerShimmer;
      View viewBottomDividerShimmer = rootView.findViewById(id);
      if (viewBottomDividerShimmer == null) {
        break missingId;
      }

      id = R.id.viewLikeShimmer;
      View viewLikeShimmer = rootView.findViewById(id);
      if (viewLikeShimmer == null) {
        break missingId;
      }

      id = R.id.viewMessageShimmer;
      View viewMessageShimmer = rootView.findViewById(id);
      if (viewMessageShimmer == null) {
        break missingId;
      }

      id = R.id.viewPagerShimmer;
      ViewPager2 viewPagerShimmer = rootView.findViewById(id);
      if (viewPagerShimmer == null) {
        break missingId;
      }

      id = R.id.viewPictureDividerShimmer;
      View viewPictureDividerShimmer = rootView.findViewById(id);
      if (viewPictureDividerShimmer == null) {
        break missingId;
      }

      return new ShimmerHomePostsBinding((ConstraintLayout) rootView, civPostUserImageShimmer,
          dotIndicatorShimmer, flexBoxShimmer, groupMultiPictures, guidelineEndShimmer,
          guidelineStartShimer, tvCommentsShimmer, tvLikesShimmer, tvPostDescShimmer,
          tvUserFullNameShimmer, tvUserNameShimmer, tvViewMoreShimmer, viewBottomDividerShimmer,
          viewLikeShimmer, viewMessageShimmer, viewPagerShimmer, viewPictureDividerShimmer);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
